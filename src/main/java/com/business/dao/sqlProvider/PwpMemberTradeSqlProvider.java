package com.business.dao.sqlProvider;

import com.business.entity.PwpMemberTrade;
import com.business.entity.PwpMemberTradeCriteria.Criteria;
import com.business.entity.PwpMemberTradeCriteria.Criterion;
import com.business.entity.PwpMemberTradeCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class PwpMemberTradeSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    public String countByExample(PwpMemberTradeCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("pwp_member_trade");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    public String deleteByExample(PwpMemberTradeCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("pwp_member_trade");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    public String insertSelective(PwpMemberTrade record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("pwp_member_trade");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getBalance() != null) {
            sql.VALUES("balance", "#{balance,jdbcType=DOUBLE}");
        }
        
        if (record.getBillingAccountId() != null) {
            sql.VALUES("billing_account_id", "#{billingAccountId,jdbcType=INTEGER}");
        }
        
        if (record.getCarNum() != null) {
            sql.VALUES("car_num", "#{carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateDate() != null) {
            sql.VALUES("create_date", "#{createDate,jdbcType=DATE}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.VALUES("member_detail_id", "#{memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberExternalAccount() != null) {
            sql.VALUES("member_external_account", "#{memberExternalAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberId() != null) {
            sql.VALUES("member_id", "#{memberId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberPCardId() != null) {
            sql.VALUES("member_p_card_id", "#{memberPCardId,jdbcType=INTEGER}");
        }
        
        if (record.getParkId() != null) {
            sql.VALUES("park_id", "#{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkIdJava() != null) {
            sql.VALUES("park_id_java", "#{parkIdJava,jdbcType=INTEGER}");
        }
        
        if (record.getSyncResult() != null) {
            sql.VALUES("sync_result", "#{syncResult,jdbcType=SMALLINT}");
        }
        
        if (record.getSyncTime() != null) {
            sql.VALUES("sync_time", "#{syncTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getTradeAmount() != null) {
            sql.VALUES("trade_amount", "#{tradeAmount,jdbcType=DOUBLE}");
        }
        
        if (record.getTradeNo() != null) {
            sql.VALUES("trade_no", "#{tradeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getTradeResult() != null) {
            sql.VALUES("trade_result", "#{tradeResult,jdbcType=SMALLINT}");
        }
        
        if (record.getTradeType() != null) {
            sql.VALUES("trade_type", "#{tradeType,jdbcType=SMALLINT}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    public String selectByExample(PwpMemberTradeCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("balance");
        sql.SELECT("billing_account_id");
        sql.SELECT("car_num");
        sql.SELECT("create_date");
        sql.SELECT("create_time");
        sql.SELECT("member_detail_id");
        sql.SELECT("member_external_account");
        sql.SELECT("member_id");
        sql.SELECT("member_p_card_id");
        sql.SELECT("park_id");
        sql.SELECT("park_id_java");
        sql.SELECT("sync_result");
        sql.SELECT("sync_time");
        sql.SELECT("trade_amount");
        sql.SELECT("trade_no");
        sql.SELECT("trade_result");
        sql.SELECT("trade_type");
        sql.SELECT("update_time");
        sql.FROM("pwp_member_trade");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PwpMemberTrade record = (PwpMemberTrade) parameter.get("record");
        PwpMemberTradeCriteria example = (PwpMemberTradeCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("pwp_member_trade");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getBalance() != null) {
            sql.SET("balance = #{record.balance,jdbcType=DOUBLE}");
        }
        
        if (record.getBillingAccountId() != null) {
            sql.SET("billing_account_id = #{record.billingAccountId,jdbcType=INTEGER}");
        }
        
        if (record.getCarNum() != null) {
            sql.SET("car_num = #{record.carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateDate() != null) {
            sql.SET("create_date = #{record.createDate,jdbcType=DATE}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.SET("member_detail_id = #{record.memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberExternalAccount() != null) {
            sql.SET("member_external_account = #{record.memberExternalAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberId() != null) {
            sql.SET("member_id = #{record.memberId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberPCardId() != null) {
            sql.SET("member_p_card_id = #{record.memberPCardId,jdbcType=INTEGER}");
        }
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkIdJava() != null) {
            sql.SET("park_id_java = #{record.parkIdJava,jdbcType=INTEGER}");
        }
        
        if (record.getSyncResult() != null) {
            sql.SET("sync_result = #{record.syncResult,jdbcType=SMALLINT}");
        }
        
        if (record.getSyncTime() != null) {
            sql.SET("sync_time = #{record.syncTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getTradeAmount() != null) {
            sql.SET("trade_amount = #{record.tradeAmount,jdbcType=DOUBLE}");
        }
        
        if (record.getTradeNo() != null) {
            sql.SET("trade_no = #{record.tradeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getTradeResult() != null) {
            sql.SET("trade_result = #{record.tradeResult,jdbcType=SMALLINT}");
        }
        
        if (record.getTradeType() != null) {
            sql.SET("trade_type = #{record.tradeType,jdbcType=SMALLINT}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_member_trade");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("balance = #{record.balance,jdbcType=DOUBLE}");
        sql.SET("billing_account_id = #{record.billingAccountId,jdbcType=INTEGER}");
        sql.SET("car_num = #{record.carNum,jdbcType=VARCHAR}");
        sql.SET("create_date = #{record.createDate,jdbcType=DATE}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("member_detail_id = #{record.memberDetailId,jdbcType=INTEGER}");
        sql.SET("member_external_account = #{record.memberExternalAccount,jdbcType=VARCHAR}");
        sql.SET("member_id = #{record.memberId,jdbcType=INTEGER}");
        sql.SET("member_p_card_id = #{record.memberPCardId,jdbcType=INTEGER}");
        sql.SET("park_id = #{record.parkId,jdbcType=INTEGER}");
        sql.SET("park_id_java = #{record.parkIdJava,jdbcType=INTEGER}");
        sql.SET("sync_result = #{record.syncResult,jdbcType=SMALLINT}");
        sql.SET("sync_time = #{record.syncTime,jdbcType=TIMESTAMP}");
        sql.SET("trade_amount = #{record.tradeAmount,jdbcType=DOUBLE}");
        sql.SET("trade_no = #{record.tradeNo,jdbcType=VARCHAR}");
        sql.SET("trade_result = #{record.tradeResult,jdbcType=SMALLINT}");
        sql.SET("trade_type = #{record.tradeType,jdbcType=SMALLINT}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        
        PwpMemberTradeCriteria example = (PwpMemberTradeCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(PwpMemberTrade record) {
        SQL sql = new SQL();
        sql.UPDATE("pwp_member_trade");
        
        if (record.getBalance() != null) {
            sql.SET("balance = #{balance,jdbcType=DOUBLE}");
        }
        
        if (record.getBillingAccountId() != null) {
            sql.SET("billing_account_id = #{billingAccountId,jdbcType=INTEGER}");
        }
        
        if (record.getCarNum() != null) {
            sql.SET("car_num = #{carNum,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateDate() != null) {
            sql.SET("create_date = #{createDate,jdbcType=DATE}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getMemberDetailId() != null) {
            sql.SET("member_detail_id = #{memberDetailId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberExternalAccount() != null) {
            sql.SET("member_external_account = #{memberExternalAccount,jdbcType=VARCHAR}");
        }
        
        if (record.getMemberId() != null) {
            sql.SET("member_id = #{memberId,jdbcType=INTEGER}");
        }
        
        if (record.getMemberPCardId() != null) {
            sql.SET("member_p_card_id = #{memberPCardId,jdbcType=INTEGER}");
        }
        
        if (record.getParkId() != null) {
            sql.SET("park_id = #{parkId,jdbcType=INTEGER}");
        }
        
        if (record.getParkIdJava() != null) {
            sql.SET("park_id_java = #{parkIdJava,jdbcType=INTEGER}");
        }
        
        if (record.getSyncResult() != null) {
            sql.SET("sync_result = #{syncResult,jdbcType=SMALLINT}");
        }
        
        if (record.getSyncTime() != null) {
            sql.SET("sync_time = #{syncTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getTradeAmount() != null) {
            sql.SET("trade_amount = #{tradeAmount,jdbcType=DOUBLE}");
        }
        
        if (record.getTradeNo() != null) {
            sql.SET("trade_no = #{tradeNo,jdbcType=VARCHAR}");
        }
        
        if (record.getTradeResult() != null) {
            sql.SET("trade_result = #{tradeResult,jdbcType=SMALLINT}");
        }
        
        if (record.getTradeType() != null) {
            sql.SET("trade_type = #{tradeType,jdbcType=SMALLINT}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table pwp_member_trade
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, PwpMemberTradeCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}